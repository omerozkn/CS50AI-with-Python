---->how to program player(board) function:
# The player function should take a board state as input and return whose turn it is (either X or O).
# In the initial game state, X goes first. After that, players alternate turns with each move.
#Any return value is acceptable if a terminal board is provided as input (i.e., the game is already over).


----> how to program actions(board)
#Returns set of all possible actions (i, j) available on the board.
#The actions function should return a set of all of the possible actions that can be taken on a given board.
#Each action should be represented as a tuple (i, j) where i corresponds to the row of the move (0, 1, or 2) and j corresponds to which cell 
in the row corresponds to the move (also 0, 1, or 2).
#Possible moves are any cells on the board that do not already have an X or an O in them.
#Any return value is acceptable if a terminal board is provided as input.

-->how can I implement this?
# Step 1: Check if the game is over using terminal(board). If it is, return an empty set.
# Step 2: Create an empty set to hold all possible (row, column) actions.
# Step 3: Loop through all cells of the board.
#         For each cell, if it is EMPTY, add its (row_index, column_index) as a tuple to the set.
# Step 4: Return the set of valid actions.

----> how to program result(board, action)
#Returns the board that results from making move (i, j) on the board.
#The result function takes a board and an action as input, and should return a new board state, without modifying the original board.
#If action is not a valid action for the board, your program should raise an exception.
#The returned board state should be the board that would result from taking the original input board, and letting the player whose turn it is
make their move at the cell indicated by the input action.
#Importantly, the original board should be left unmodified: since Minimax will ultimately require considering many different board states during 
its computation.
#This means that simply updating a cell in board itself is not a correct implementation of the result function. 
#Youâ€™ll likely want to make a deep copy of the board first before making any changes.
--> Steps to implement:
1. Make a deep copy of the board to avoid modifying the original.
2. Use player(board) to determine whose turn it is (X or O).
3. Validate the action: raise an Exception if the cell is already occupied or the action is illegal.
4. Apply the move to the copied board at the specified row and column.
5. Return the modified copy as the new board state.

---->how to program result
#The winner function should accept a board as input, and return the winner of the board if there is one.
#If the X player has won the game, your function should return X. If the O player has won the game, your function should return O.
#One can win the game with three of their moves in a row horizontally, vertically, or diagonally.
#You may assume that there will be at most one winner (that is, no board will ever have both players with three-in-a-row, since that would be an invalid board state).
#If there is no winner of the game (either because the game is in progress, or because it ended in a tie), the function should return None.
--> Steps to implement:
1.
2.
3.
4.

