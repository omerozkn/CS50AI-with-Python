---->how to program player(board) function:
#The player function should take a board state as input, and return which player’s turn it is (either X or O).
#In the initial game state, X gets the first move. Subsequently, the player alternates with each additional move.
#Any return value is acceptable if a terminal board is provided as input (i.e., the game is already over).

----> how to program actions(board)
#Returns set of all possible actions (i, j) available on the board.
#The actions function should return a set of all of the possible actions that can be taken on a given board.
#Each action should be represented as a tuple (i, j) where i corresponds to the row of the move (0, 1, or 2) and j corresponds to which cell 
in the row corresponds to the move (also 0, 1, or 2).
#Possible moves are any cells on the board that do not already have an X or an O in them.
#Any return value is acceptable if a terminal board is provided as input.
-->how can I implement this?
# first check if the game is over
# create a empty set for all the possible actions
#program needs to look for evry cells in the borad and if the cell is empty it should add a tuple (i, j) to the set of possible actions

----> how to program result(board, action)
#Returns the board that results from making move (i, j) on the board.
#The result function takes a board and an action as input, and should return a new board state, without modifying the original board.
#If action is not a valid action for the board, your program should raise an exception.
#The returned board state should be the board that would result from taking the original input board, and letting the player whose turn it is
make their move at the cell indicated by the input action.
#Importantly, the original board should be left unmodified: since Minimax will ultimately require considering many different board states during 
its computation.
This means that simply updating a cell in board itself is not a correct implementation of the result function. 
You’ll likely want to make a deep copy of the board first before making any changes.
-->how can I implement this?
-First, we need to make a deep copy of the board; we need the original board to remain unchanged. 
-find out which player's turn with player(board) function
-Before modifying anything, check that the target cell is empty.if action is not valid(already has a X or O symbol) raise an exception  
if it's valid add the action to the copy board and retun the new board(to look at the target location at borad use row and col numbers)
-